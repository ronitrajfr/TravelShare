generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int       @id @default(autoincrement())
    imageUrls   String[]
    state       String
    city        String
    country     String
    address     String
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   User      @relation("UserPosts", fields: [createdById], references: [username])
    createdById String
    votes       Vote[]    
    reports     Report[]

    @@index([name])
}

model Vote {
    id        Int      @id @default(autoincrement())
    type      String   // "upvote" or "downvote"
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    user      User     @relation("UserVotes", fields: [userId], references: [username])
    userId    String
    createdAt DateTime @default(now())

    @@unique([postId, userId])
}

model Report {
    id        Int      @id @default(autoincrement())
    reason    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    user      User     @relation("UserReports", fields: [userId], references: [username])
    userId    String
    createdAt DateTime @default(now())

    @@unique([postId, userId])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token            String? // @db.Text
    expires_at              Int?
    token_type              String?
    scope                   String?
    id_token               String? // @db.Text
    session_state          String?
    user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique @default(cuid())
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    spotify       String?
    instagram     String?
    twitter       String?
    bio           String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("UserPosts")
    votes         Vote[]    @relation("UserVotes")
    reports       Report[]  @relation("UserReports")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}